/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jsiit.jamb;

import com.jsiit.data.Student;
import com.jsiit.data.StudentDB;
import com.jsiit.util.DBException;
import com.jsiit.util.ExcelExporter;

import java.awt.BorderLayout;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;

/**
 *
 * @author salisu14
 */
public class StudentManagerFrame extends javax.swing.JFrame {

    private final JTable studentTable;
    private StudentTableModel studentTableModel;

    /**
     * Creates new form StudentManagerFrame
     */
    public StudentManagerFrame() {

        add(buildButtonPanel(), BorderLayout.NORTH);
        studentTable = buildStudentTable();
        add(new JScrollPane(studentTable), BorderLayout.CENTER);
        //this.setVisible(true);

    }

    private JPanel buildButtonPanel() {
        JPanel panel = new JPanel();

        JButton addButton = new JButton("Add");
        addButton.addActionListener((ActionEvent) -> {
            doAddButton();
        });
        panel.add(addButton);

        JButton editButton = new JButton("Edit");
        editButton.addActionListener((ActionEvent) -> {
            doEditButton();
        });
        panel.add(editButton);

        JButton deleteButton = new JButton("Delete");
        deleteButton.addActionListener((ActionEvent) -> {
            doDeleteButton();
        });
        panel.add(deleteButton);

        JButton searchButton = new JButton("Search");
        searchButton.addActionListener((ActionEvent) -> {
            doSearchButton();
        });
        panel.add(deleteButton);

        JButton exportButton = new JButton("Export to Excel");
        exportButton.addActionListener((ActionEvent) -> {
                doExportButton();
        });
        panel.add(exportButton);

        JButton importButton = new JButton("Import from Excel");
        importButton.addActionListener((ActionEvent) -> {
            doImportButton();
        });
        panel.add(importButton);

        return panel;
    }

    private JTable buildStudentTable() {
        studentTableModel = new StudentTableModel();
        JTable table = new JTable(studentTableModel);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.setBorder(null);
        return table;
    }

    /*
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
  
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setType(java.awt.Window.Type.UTILITY);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            StudentManagerFrame frame = new StudentManagerFrame();
            frame.setTitle("JSIIT Central Admission Processing System");
            frame.setSize(1000, 500);
            frame.setLocationByPlatform(true);
            //frame.setLocationRelativeTo(null);

            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            StudentManagerFrame.setDefaultLookAndFeelDecorated(true);
            frame.setVisible(true);
        });
    }

    private void doAddButton() {
        StudentForm studentForm = new StudentForm(this, "Add Student", true);
        studentForm.setLocationRelativeTo(this);
        studentForm.setVisible(true);
    }

    private void doEditButton() {
        int selectedRow = studentTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                    "No student is currently selected.",
                    "No student selected", JOptionPane.ERROR_MESSAGE);
        } else {
            Student student = studentTableModel.getStudent(selectedRow);
            StudentForm studentForm
                    = new StudentForm(this, "Edit Student", true, student);
            studentForm.setLocationRelativeTo(this);
            studentForm.setVisible(true);
        }
    }

    private void doDeleteButton() {
        int selectedRow = studentTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "No Student is currently selected.",
                    "No student selected", JOptionPane.ERROR_MESSAGE);
        } else {
            Student student = studentTableModel.getStudent(selectedRow);
            int ask = JOptionPane.showConfirmDialog(this, "Are you sure you want delete "
                    + student.getFirstName() + " " + student.getLastName() + " from the database?",
                    "Confirm delete", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE );
            if (ask == JOptionPane.YES_OPTION) {
                try {
                    StudentDB.delete(student);
                    fireDatabaseUpdatedEvent();
                } catch (DBException e) {
                    System.out.println(e);
                }
            }
        }

    }

    public void fireDatabaseUpdatedEvent() {
        studentTableModel.databaseUpdated();
    }

    private void doExportButton() {
        ExcelExporter exporter = new ExcelExporter();
        try {
            ArrayList<Object[]> dataList = exporter.getTableData();
            if (dataList != null && dataList.size() > 0) {
                exporter.doExport(dataList);
                JOptionPane.showMessageDialog(this, "Records exported to excel sheet.",
                        "Task completed!", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No Available Data",
                        "Database empty", JOptionPane.ERROR_MESSAGE);
            }
        } catch (DBException e) {
            System.out.println(e);
        }
    }

    private void doImportButton() {
        JOptionPane.showMessageDialog(this, "This feature has not been implemented yet",
                "Not yet implemented", JOptionPane.INFORMATION_MESSAGE);
    }

    private void doSearchButton() {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
